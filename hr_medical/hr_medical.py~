#-*- coding:utf-8 -*-

import time
from datetime import date
from datetime import datetime
from datetime import timedelta
from dateutil import relativedelta

from openerp import netsvc
from openerp.osv import fields, osv
from openerp import tools
from openerp.tools.translate import _
import openerp.addons.decimal_precision as dp

from openerp.tools.safe_eval import safe_eval as eval



class hr_medical(osv.osv):

    _name = "hr.medical"
    _description = "Human Ressources Medical"

    def create(self, cr, uid, vals, context=None):
        if vals.get('name','/')=='/':
            vals['name'] = self.pool.get('ir.sequence').get(cr, uid, 'hr.medical') or '/'
        return super(hr_medical, self).create(cr, uid, vals, context=context)
            
    _columns = {
        'name':fields.char('Numero', size=64),
        'employee_id':fields.many2one('hr.employee','Employe',readonly=True, states={'draft': [('readonly', False)], 'sent': [('readonly', False)]}),
        'user_id':fields.many2one('res.users','Medecin'),
        'date':fields.date('Date',readonly=True, states={'draft': [('readonly', False)], 'sent': [('readonly', False)]}),
        'diagnostique':fields.text('Diagnostique',readonly=True, states={'draft': [('readonly', False)], 'sent': [('readonly', False)]}),
        'prescription_line': fields.one2many('prescription.line', 'medical_id', 'Prescription', readonly=True, states={'draft': [('readonly', False)]}),
        'state':fields.selection(
            (('draft', 'Brouillon'),('open', 'Ouverte'),('done', 'Termine'),('cancel', 'Annule')),
            'Etat',readonly=True),
	    
        
        }
    _defaults = {
        'date': fields.date.context_today,
        'state': 'draft',
        'user_id': lambda obj, cr, uid, context: uid,
        'name': lambda obj, cr, uid, context: '/',
    }
hr_medical()

#manda Manda
class product_categorie(osv.osv):
    
    _inherit= "product.category"
    
    _columns = {
       'classe_med':fields.char('Code medicament', size=64),
       }
product_categorie()

class product_template (osv.osv):
     
    _inherit= "product.template"
    _description = "ajout champ bool"
    _columns = {
             'medicament':fields.boolean('Medicament'),
                }
product_template()

class prescription_line(osv.osv):

    _name = "prescription.line"
    _description = "Ligne de Prescription"

    def _get_uom_id(self, cr, uid, *args):
        try:
            proxy = self.pool.get('ir.model.data')
            result = proxy.get_object_reference(cr, uid, 'product', 'product_uom_unit')
            return result[1]
        except Exception, ex:
            return False
            
    _columns = {
        'medical_id': fields.many2one('hr.medical', 'Prescription', required=True, ondelete='cascade', select=True, readonly=True, states={'draft':[('readonly',False)]}),
        'name': fields.text('Description', required=True, readonly=True, states={'draft': [('readonly', False)]}),
        'product_id': fields.many2one('product.product', 'Medicament', domain=[('sale_ok', '=', True)], change_default=True),
        'product_uom_qty': fields.float('Quantite', required=True, readonly=True, states={'draft': [('readonly', False)]}),
        'product_uom': fields.many2one('product.uom', 'Unit de mesure ', required=True, readonly=True, states={'draft': [('readonly', False)]}),
        'state':fields.selection(
            (('draft', 'Brouillon'),('open', 'Ouverte'),('done', 'Termine'),('cancel', 'Annule')),
            'Etat',readonly=True),
        }
        
    _defaults = {
        'product_uom' : _get_uom_id,
        'product_uom_qty': 1,
        'state':'draft',
    }
    
    def product_id_change(self, cr, uid, ids, product, qty=0, uom=False, name='', update_tax=True, context=None):
        context = context or {}
        warning = {}
        product_uom_obj = self.pool.get('product.uom')
        product_obj = self.pool.get('product.product')

        if not product:
            return {'value': {
                'product_uos_qty': qty}, 'domain': {'product_uom': [],
                   }}

        result = {}
        warning_msgs = ''
        product_obj = product_obj.browse(cr, uid, product, context=context)

        uom2 = False
        if uom:
            uom2 = product_uom_obj.browse(cr, uid, uom)
            if product_obj.uom_id.category_id.id != uom2.category_id.id:
                uom = False

        if (not uom):
            result['product_uom'] = product_obj.uom_id.id
            if product_obj.uos_id:
                uos_category_id = product_obj.uos_id.category_id.id
            else:
                result['product_uos_qty'] = qty
                uos_category_id = False
            domain = {'product_uom':
                        [('category_id', '=', product_obj.uom_id.category_id.id)],
                    }

        if not uom2:
            uom2 = product_obj.uom_id
        
        return {'value': result, 'domain': domain, 'warning': warning}


prescription_line()

class product_template(osv.Model):
    _name = 'product.template'
    _inherit = 'product.template'
    
    def _get_buy_route(self, cr, uid, context=None):
        
        buy_route = self.pool.get('ir.model.data').xmlid_to_res_id(cr, uid, 'medicament.route_warehouse0_buy')
        if buy_route:
            return [buy_route]
        return []

    _columns = {
        'is_one_medicament': fields.boolean('est un medicament', help='Check if the product is a medicament'),
               }
    
product_template()


        
