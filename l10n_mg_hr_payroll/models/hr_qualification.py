# -*- coding: utf-8 -*-
##############################################################################
#
#    OpenERP, Open Source Management Solution
#    Copyright (C) 2004-2010 Tiny SPRL (<http://tiny.be>).
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################
# Generated by the OpenERP plugin for Dia !
# from osv import fields
from openerp.osv import fields, osv
import datetime

class aptitude_type(osv.osv):

    _name = "aptitude.type"
    _description = "Type D'aptitude"

    _columns = {
        'name':fields.char('Aptitude', size=64),
        }
aptitude_type()

class hr_applicant_aptitude(osv.osv):

    _name = "hr.applicant.aptitude"
    _description = "Aptitudes d'un employe"

    _columns = {
        'name':fields.many2one('aptitude.type', 'Aptitude'),
        'applicant_id':fields.many2one('hr.applicant', 'Candidat'),
        'taux':fields.integer(u'Taux employé %'),
        }
hr_applicant_aptitude()

class hr_employee_aptitude(osv.osv):

    _name = "hr.employee.aptitude"
    _description = "Aptitudes d'un employe"

    _columns = {
        'name':fields.many2one('aptitude.type', 'Aptitude'),
        'niveau':fields.char('Niveau'),
        'employee_id':fields.many2one('hr.employee', 'Employe'),
        'taux':fields.integer('Taux employe'),
        }
hr_employee_aptitude()

class hr_job_aptitude(osv.osv):

    _name = "hr.job.aptitude"
    _description = "Aptitude necessaire pour un poste"

    _columns = {
        'name':fields.many2one('aptitude.type', 'Aptitude Requis'),
        'job_id':fields.many2one('hr.job', 'Poste'),
        'taux':fields.integer('Taux requis'),
        }
hr_job_aptitude()

class hr_employee_branche(osv.osv):
    """gestion des branches des qualifications"""
    _name = 'hr.employee.branche'
    _columns = {
    'name':fields.char('Libellé', size=64),
    }
hr_employee_branche()

class hr_employee_note(osv.osv):
    """Gestion des notes des employes"""
    _name = 'hr.employee.note'
    _columns = {
    'employee_id':fields.many2one('hr.employee', 'Employe'),
    'annee':fields.char('Annee', size=16),
    'note':fields.selection((('a', 'A'), ('b', 'B'), ('b+', 'B+'), ('c', 'C'), ('c+', 'C+'), ('d', 'D')), 'Note'),
    'mois':fields.char('Mois', size=32),
    'ref':fields.char('Reference', size=32),
    }
hr_employee_note()

class hr_employee_formation_module(osv.osv):
    """Gestion des modules de formation chez ARO"""
    _name = 'hr.employee.formation.module'
    _columns = {
    'code':fields.char('Code', size=16),
    'name':fields.char('Titre', size=64),
    }
hr_employee_formation_module()

class hr_employee_formation(osv.osv):
    """Gestion des formations des employes chez ARO"""
    _name = 'hr.employee.formation'
    _description = 'Formations'
    _columns = {
        'employee_id':fields.many2one('hr.employee', 'Employe'),
        'date':fields.date('Date'),
        'name': fields.many2one('qual.type', 'Qualification'),
        'branche_id':fields.many2one('hr.employee.branche', 'Niveau'),  # #add by Hari
        'specialite':fields.char('Specialite', size=64),  # #add by Hari
        'institute_id':fields.many2one('institute', 'Institut'),
        'lieu':fields.char('Lieu', size=32),  # #add by Hari
    }
hr_employee_formation()

class hr_applicant_formation(osv.osv):
    """Gestion des formations des employes chez ARO"""
    _name = 'hr.applicant.formation'
    _description = 'Formations'
    _columns = {
        'ref':fields.integer('Reference'),
        'applicant_id':fields.many2one('hr.applicant', 'Candidat'),
        'date':fields.date('Date'),
        'name':fields.many2one('hr.employee.formation.module', 'Formation'),
        'commentaire':fields.text('Commentaire'),
    }
hr_applicant_formation()

class hr_job_formation(osv.osv):

    _name = "hr.job.formation"
    _description = "Formation requis pour le poste"

    _columns = {
        'name':fields.many2one('hr.employee.formation.module', 'Formation'),
        'job_id':fields.many2one('hr.job', 'Poste'),
    }
hr_job_formation()

class qual_type(osv.osv):
    _name = 'qual.type'
    _columns = {
        'name':fields.char('Description', size=32),
        'code':fields.char('Code diplome', size=16),
        }
qual_type()

class institute(osv.osv):
    _name = 'institute'
    _columns = {
        'name':fields.char('Institut'),
    }
institute()

class hr_employee_qualification(osv.osv):
    """gestion des qualifications"""
    _name = 'hr.employee.qualification'
    _columns = {
    'date': fields.date('Date'),
    'name': fields.many2one('qual.type', 'Qualification'),
    'employee_id':fields.many2one('hr.employee', 'Salarie'),
    'branche_id':fields.many2one('hr.employee.branche', 'Niveau'),  # #add by Hari
    'specialite':fields.char('Specialite', size=64),  # #add by Hari
    'institute_id':fields.many2one('institute', 'Institut'),
    'lieu':fields.char('Lieu', size=32),  # #add by Hari
    'job_id':fields.related('employee_id', 'job_id', type="many2one",
				relation="hr.job",
    				string="Poste",
    				store=False),
    'matricule':fields.related('employee_id', 'matricule', type="char",
                                string="Matricule",
                                store=True),

    }
hr_employee_qualification()

class hr_job_qualification(osv.osv):

    _name = "hr.job.qualification"
    _description = "Qualifications Pour un poste"

    _columns = {
    'name': fields.many2one('qual.type', 'Qualification Requise'),
    'branche_id':fields.many2one('hr.employee.branche', 'Branche'),  # #add by Hari
    'specialite':fields.char('Specialite', size=64),  # #add by Hari
    'job_id':fields.many2one('hr.job', 'Poste'),
        }
hr_job_qualification()

class hr_applicant_qualification(osv.osv):
    """gestion des qualifications"""
    _name = 'hr.applicant.qualification'
    _columns = {
    'date': fields.date('Date'),
    'name': fields.many2one('qual.type', 'Qualification'),
    'applicant_id':fields.many2one('hr.applicant', 'Candidat'),
    'branche_id':fields.many2one('hr.employee.branche', 'Branche'),  # #add by Hari
    'specialite':fields.char('Specialite', size=16),  # #add by Hari
    'annee':fields.integer('Annee'),  # #add by Hari
    'lieu':fields.char('Lieu', size=32),  # #add by Hari

    }
hr_applicant_qualification()

"""
class hr_applicant(osv.osv):
    _inherit = 'hr.applicant'
    def _get_salary(self, cr, uid, ids, name, arg, context={}):
        result = {}
        net=0
        param_obj=self.pool.get('hr.payroll_ma.parametres')
        param_ids=param_obj.search(cr,uid,[])
        param_ids=param_obj.browse(cr,uid,param_ids)
        for param in param_ids:
            if not param.salary_on_index:
                return False
            else:
                index_value=param.index
        for payroll in self.browse(cr, uid, ids, context):
            for index in payroll.job_id.categ_id.index_ids:
                result[payroll.id] = index.index*173.33*index_value/5
                break
        return result

    _columns = {
        'qualification_ids':fields.one2many('hr.applicant.qualification','applicant_id','Qualifications'),
        'formation_ids':fields.one2many('hr.applicant.formation','applicant_id','Formation'),#add by Hari
        'aptitude_ids':fields.one2many('hr.applicant.aptitude','applicant_id','Aptitudes'),
        'job_qualification_ids':fields.related('job_id','qualification_ids',string='Qualifications Requise',type='one2many',relation='hr.job.qualification'),
        'job_aptitude_ids':fields.related('job_id','aptitude_ids',string='Aptitudes Requise',type='one2many',relation='hr.job.aptitude' ),
        'job_qualification_ids':fields.related('job_id','qualification_ids',string='Qualifications Requise',type='one2many',relation='hr.job.qualification'),
        'job_formation_ids':fields.related('job_id','formation_ids',string='Formations necessaire',type='one2many',relation='hr.job.formation'),

        'salary_index':fields.function(_get_salary,method=True, type='float',digits=(16, 2), string='Salaire Indicatif'),

    }
"""

class hr_employee(osv.osv):
    _inherit = 'hr.employee'
    _columns = {
        'qualification_ids':fields.one2many('hr.employee.qualification', 'employee_id', 'Qualifications'),
        'formation_ids':fields.one2many('hr.employee.formation', 'employee_id', 'Formation'),  # add by Hari
        'aptitude_ids':fields.one2many('hr.employee.aptitude', 'employee_id', 'Aptitudes'),
    }
hr_employee()

class hr_task_categ(osv.osv):
    _name = 'hr.task.categ'

    _columns = {
        'name':fields.char('Catégorie')
    }
hr_task_categ()

class hr_employee_task(osv.osv):
    _name = 'hr.job.task'

    _columns = {
        'name': fields.char('Description'),
        'job_id':fields.many2one('hr.job', 'Poste'),
        'categ_id':fields.many2one('hr.task.categ', u'Catégorie')
    }
hr_employee_task()
