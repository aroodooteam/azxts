# -*- coding: utf-8 -*-
##############################################################################
#
#    OpenERP, Open Source Management Solution
#    Copyright (C) 2004-2010 Tiny SPRL (<http://tiny.be>).
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as
#    published by the Free Software Foundation, either version 3 of the
#    License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
##############################################################################
# Generated by the OpenERP plugin for Dia !
# from osv import fields
from openerp.osv import fields, osv
import datetime
class hr_employee(osv.osv):
        _inherit = 'hr.employee'

        def _wb(self, cr, uid, ids, field_name, arg, context):
            employees = self.read(cr, uid, ids, ['birthday', 'id'], context)
            res = {}
            for employee in employees:
                if employee['birthday']:
                    res[employee['id']] = datetime.datetime.strptime(employee['birthday'], "%Y-%m-%d").strftime("%W")
            return res
        def _seniority(self, cr, uid, ids, field_name, arg, context):
            employees = self.read(cr, uid, ids, ['date', 'id'])
            res = {}
            for employee in employees:
                days = datetime.datetime.now() - datetime.datetime.strptime(employee['date'], '%Y-%m-%d')
                avgyear = 365.2425  # pedants definition of a year length with leap years
                avgmonth = 365.2425 / 12.0  # even leap years have 12 months
                years, remainder = divmod(days.days, avgyear)
                years, months = int(years), int(remainder // avgmonth)
                m, d = divmod(remainder, avgmonth)
                seniority = str(years) + ' ans, ' + str(months) + ' mois, ' + str(int(d)) + ' jours.'
                res[employee['id']] = seniority
            return res

        def _preavis(self, cr, uid, ids, field_name, arg, context):
            groups = ['Groupe I', 'Groupe II', 'Groupe III', 'Groupe IV', 'Groupe V']
            employees = self.read(cr, uid, ids, ['category_ids', 'date', 'id'], context)
            res = {}
            grid = {}
            grid[1] = {'Groupe I':1, 'Groupe II':2, 'Groupe III':3, 'Groupe IV':4, 'Groupe V':5}
            grid[2] = {'Groupe I':3, 'Groupe II':8, 'Groupe III':15, 'Groupe IV':30, 'Groupe V':30}
            grid[3] = {'Groupe I':8, 'Groupe II':2, 'Groupe III':3, 'Groupe IV':4, 'Groupe V':5}
            grid[4] = {'Groupe I':10, 'Groupe II':30, 'Groupe III':45, 'Groupe IV':75, 'Groupe V':120}
            grid[5] = {'Groupe I':30, 'Groupe II':45, 'Groupe III':60, 'Groupe IV':90, 'Groupe V':180}
            preavis = 0
            categ_obj = self.pool.get('hr.employee.category')

            for employee in employees:
                if employee['date']:
                    days = datetime.datetime.now() - datetime.datetime.strptime(employee['date'], '%Y-%m-%d')
                    days_employed = days.days
                    years = round(days_employed / 365)
                    if employee['category_ids']:
                        categ_id = employee['category_ids'][0]
                    else:
                        res[employee['id']] = 9999
                        continue
                    category = categ_obj.browse(cr, uid, categ_id)
                    if category != []:
                        category = category.parent_id.name
                    else:
                        category = 'N/A'
                    if category not in groups:
                        res[employee['id']] = 9999
                        continue
                    if years >= 5:
                        preavis = grid[5][category]
                    elif years >= 3:
                        preavis = grid[4][category] + (years * 2)
                    elif years >= 1:
                        preavis = grid[4][category]
                    else:
                        if days_employed < 8:
                            preavis = grid[1][category]
                        elif days_employed < 90:
                            preavis = grid[2][category]
                        else:
                            preavis = grid[3][category]
                    res[employee['id']] = preavis
            return res

        _columns = {
                'weekbirthday':fields.function(_wb, method=True, string='Week Birthday', type='char'),
                'preavis':fields.function(_preavis, method=True, string='Preavis', type='float'),
                'seniority':fields.function(_seniority, method=True, string='Anciennete', type='char'),
                'sanction_ids':fields.one2many('hr.employee.sanction', 'name', 'Sanctions'),
                'qualification_ids':fields.one2many('hr.employee.qualification', 'employee_id', 'Qualifications'),
                'medical_ids':fields.one2many('hr.employee.medical.ticket', 'employee_id', 'Billet Medical'),
                'decoration_ids':fields.one2many('hr.employee.decoration', 'employee_id', 'Decorations'),  # add by Hari
                'note_ids':fields.one2many('hr.employee.note', 'employee_id', 'Note Employe'),  # add by Hari
                        'lastjob_ids':fields.one2many('hr.employee.last.job', 'employee_id', 'Ancien Emploie'),  # add by Hari
                'formation_ids':fields.one2many('hr.employee.formation', 'employee_id', 'Formation'),  # add by Hari
        }
hr_employee()

class sanction_type(osv.osv):
        _name = 'sanction.type'
        _columns = {
                'name':fields.char('Description', size=64),
                'detail':fields.text('Text sur document'),
                'interview':fields.boolean('Entretiens?'),
                'notification':fields.boolean('Notification?'),
                'days_work':fields.boolean('A defalquer sur jours travailles?'),

        }
sanction_type()

class qual_type(osv.osv):
    _name = 'qual.type'
    _columns = {
        'name':fields.char('Description'),
        'code':fields.char(u'Code diplôme', size=16),
    }
qual_type()

class medical_type(osv.osv):
        _name = 'medical.type'
        _columns = {
                'name':fields.char('Description', size=32),
                'detail':fields.text('Text sur document'),
        }
medical_type()


class hr_employee_sanction(osv.osv):
    """gestion des sanctions"""
    _name = 'hr.employee.sanction'
    _columns = {
        'motif': fields.char('Motif', size=64),
        'date': fields.date('Date'),
        'date_interview': fields.datetime('Date entretien'),
        'date_start': fields.date('Date debut sanction'),
        'date_end': fields.date('Date fin sanction'),
        'name': fields.many2one('hr.employee', 'Salarie'),
            'type':fields.many2one('sanction.type', 'Type de Sanction'),
        'description':fields.text('Commentaires'),
        'suite':fields.boolean('Avec suite'),
    }
hr_employee_sanction()

# #mes modification Hari
class hr_employee_decoration(osv.osv):
    """gestion des decorations de l'employé"""
    _name = 'hr.employee.decoration'
    _columns = {
        # 'code': fields.char('Code Decoration', size=16),
        'annee':fields.date('Date'),
        'decoration_id':fields.many2one('hr.employee.decoration.type', 'Titre Decoration'),
        'employee_id':fields.many2one('hr.employee', 'Salarié'),
   }
hr_employee_decoration()

class hr_employee_decoration_type(osv.osv):
    """gestion des types de decoration existant chez ARO."""
    _name = 'hr.employee.decoration.type'
    _columns = {
    'code': fields.char('Code Decoration', size=16),
        'name':fields.char('Titre Decoration', size=64),
    }
hr_employee_decoration_type()


class hr_employee_branche(osv.osv):
    """gestion des branches des qualifications"""
    _name = 'hr.employee.branche'
    _columns = {
    'code': fields.char('Code Branche', size=16),
        'name':fields.char('Nom Branche', size=64),
        'niveau':fields.integer('Niveau'),
    }
hr_employee_branche()

class hr_employee_note(osv.osv):
    """Gestion des notes des employes"""
    _name = 'hr.employee.note'
    _columns = {
    'employee_id':fields.many2one('hr.employee', 'Employe'),
        'annee':fields.char('Annee', size=16),
        'note':fields.selection((('a', 'A'), ('b', 'B'), ('b+', 'B+'), ('c', 'C'), ('c+', 'C+'), ('d', 'D')), 'Note'),
        'mois':fields.char('Mois', size=32),
        'ref':fields.char('Reference', size=32),
    }
hr_employee_note()

class hr_employee_last_job(osv.osv):
    """Gestion des anciens emploie des employes"""
    _name = 'hr.employee.last.job'
    _columns = {
    'employee_id':fields.many2one('hr.employee', 'Employe'),
        'annee':fields.char('Annee',size=16),
        # #'poste':fields.selection((('a','A'),('b','B'),('b+','B+'),('c','C'),('c+','C+'),('d','D')),'Note'),
        'poste':fields.char('Poste', size=32),
        'employeur':fields.char('Employeur', size=32),
        'ref':fields.char('Reference', size=32),
        'ordre':fields.integer('Ordre'),
        'date_start':fields.date('Debut'),
    'date_stop':fields.date('Fin'),

    }
hr_employee_last_job()

class hr_employee_formation_module(osv.osv):
    """Gestion des modules de formation chez ARO"""
    _name = 'hr.employee.formation.module'
    _columns = {
    'code':fields.char('Code', size=16),
        'name':fields.char('Libellé', size=64),

        # 'cout':fields.float('Coût'), ##champs en stand by
        # 'branche_id':fields.char('Branche',size=16), ##champs en stand by
        # 'specialite':fields.char('Specialite',size=32), ##champs en stand by
    }
hr_employee_formation_module()

class hr_employee_formation(osv.osv):
    """Gestion des formations des employes chez ARO"""
    _name = 'hr.employee.formation'
    _columns = {
        'ref':fields.integer('Reference'),
    'employee_id':fields.many2one('hr.employee', 'Employe'),
        'date':fields.date('Date'),
        'module_id':fields.many2one('hr.employee.formation.module', 'Module'),
        'code_module':fields.char('Code Module', size=32),  # inutile pour le moment
        'commentaire':fields.text('Commentaire'),
    }
hr_employee_formation()



# #fin

class hr_employee_qualification(osv.osv):
    """gestion des qualifications"""
    _name = 'hr.employee.qualification'
    _columns = {
    'date': fields.date('Date'),
    'name': fields.many2one('qual.type', 'Qualification'),
    'employee_id':fields.many2one('hr.employee', 'Salarie'),
        'branche_id':fields.many2one('hr.employee.branche', 'Branche'),  # #add by Hari
        'specialite':fields.char('Specialite', size=16),  # #add by Hari
        'annee':fields.integer('Annee'),  # #add by Hari
        'lieu':fields.char('Lieu', size=32),  # #add by Hari

    }
hr_employee_qualification()


class hr_employee_medical_ticket(osv.osv):
    """gestion des ticket medical"""
    _name = 'hr.employee.medical.ticket'
    _columns = {
        'date': fields.datetime('Date'),
        'name': fields.many2one('medical.type', 'Medical'),
        'repos': fields.boolean('Avec repos'),
        'date_debut_repos': fields.date('Date debut repos'),
        'date_fin_repos': fields.date('Date reprise de poste'),
        'employee_id':fields.many2one('hr.employee', 'Salarie'),
    }
hr_employee_medical_ticket()

